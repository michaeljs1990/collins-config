include "validations.conf"
include "authentication.conf"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="AbFgHx0eJx8lalkja812389uasdlkajsdlka98012398uasdlkasdklajsd81298"
parsers.text.maxLength=1048576
# evolutionplugin should be disabled in a production environment
#evolutionplugin=disabled

# Do not change the crypto key after you have started using it, you will be unable to decrypt data
crypto.key="lkkajsdlkajsdlkajsdlkajsdlkajsdlkajsdlkajsdlkajsdlkajsdlkajsdla"

features {
  encryptedTags = [ SYSTEM_PASSWORD, LOCATION ]
  # we want to be able to update these managed attributes
  allowTagUpdates = [INTERFACE_NAME, NIC_SPEED, MAC_ADDRESS, INTERFACE_ADDRESS, RACK_POSITION, TYPE]
  # allow lshw/lldp to be updated when machines are in these states (provisioning prep, etc)
  allowedServerUpdateStatuses = [ PROVISIONED, PROVISIONING ]
  noLogPurges = []
}


monitoring {
  enabled = true
  GenericFrame {
    urlTemplate = "https://icinga.tumblr.net/icinga/cgi-bin/status.cgi?search_string=%s"
  }
}

graph {
  enabled = true
  FibrGraphs {
    customMetrics {
      mysqlHosts {
        selector = "PRIMARY_ROLE = \"DATABASE\""
        metrics = [
          MYSQL/COMMANDS,
          MYSQL/SLOW,
          MYSQL/THREADS,
          MYSQL/NET
        ]
      }

      memcacheHosts {
        selector = "POOL = MEMCACHE*"
        metrics = [
          MEMCACHE/COMMANDS,
          MEMCACHE/EVICTS,
          MEMCACHE/ITEMS,
          MEMCACHE/HITRATIO
        ]
      }
    }
  }
}

multicollins {
  enabled = true
  thisInstance = "PIT-SHD-1"
}

nodeclassifier {
  assetType = CONFIGURATION
  identifyingMetaTag = IS_NODECLASS
  displayNameAttribute = NAME
  excludeMetaTags = [IS_NODECLASS, NOTE]
  sortKeys = [SL_RACK_POSITION, SL_RACK]
}

powerconfiguration.unitsRequired=1

callbacks.registry {

  nowProvisioned {
    on = "asset_update"

    when {
      previous.state = "isProvisioning"
      current.state = "isProvisioned"
    }

    action {
      type = exec
      command = "echo <tag>"
    }
  }

  hardwareProblem {
    on = "asset_update"
    when {
      previous.state = "!isMaintenance"
      current.state = "isMaintenance"
      current.states = [
        IPMI_PROBLEM,
        HARDWARE_PROBLEM,
        HARDWARE_UPGRADE
      ]
    }
    action {
      type = exec
      command = "/collins/hardware_problem <tag>"
    }
  }

  ipmiProblem {
    on = "asset_update"
    when {
      previous.state = "!isMaintenance"
      current.state = "isMaintenance"
      current.states = [ IPMI_PROBLEM ]
    }
    action {
      type = exec
      command = "/collins/ipmi_problem <tag>"
    }
  }

}

softlayer.allowedCancelStatus=[Unallocated, Allocated, Maintenance]
softlayer.cancelRequestTimeout=10 seconds
softlayer.activationRequestTimeout=10 seconds

tagdecorators {
  templates {
    search = "<a href=\"/resources?{name}={value}\">{value}</a>"
  }
  decorators {
    STATS_LINKS {
      decorator="<a target=\"_blank\" href=\"{value}\">{i.label}</a>"
      valueParser="collins.util.views.DelimiterParser"
      delimiter=" "
      between=" - "
      0.label="Thrift"
      1.label="HTTP"
    }
    TUMBLR_SHA.decorator="<a target=\"_blank\" href=\"https://github.com/tumblr/tumblr/commit/{value}\">{value}</a>"
    CONFIG_SHA.decorator="<a target=\"_blank\" href=\"https://github.com/tumblr/config/commit/{value}\">{value}</a>"
    POWER_PORT.decorator=${tagdecorators.templates.search}
    RACK_POSITION {
      decorator = ${tagdecorators.templates.search}
      valueParser = "collins.util.views.DelimiterParser"
      delimiter = "-"
      between = "-"
    }
    SL_ROOM.decorator=${tagdecorators.templates.search}
    SL_RACK.decorator=${tagdecorators.templates.search}
    SL_RACK_POSITION.decorator=${tagdecorators.templates.search}
    IP_ADDRESS {
      decorator="<a href=\"ssh://{value}\">{value}</a>"
      between=", "
    }
  }
}

# Provisioner Plugin
# https://tumblr.github.io/collins/configuration.html#provisioning
provisioner.enabled=true
provisioner.profiles="conf/profiles.yaml"
provisioner.rate="1/10 seconds"
provisioner.checkCommand="/bin/true" # TODO: make this an actual check
provisioner.command="/collins/provision_asset <tag> <profile-id> <notify> <suffix>"
provisioner.checkCommandTimeout=5 seconds
provisioner.commandTimeout=20 seconds

# Power Management Plugin
powermanagement {
  enabled = true
  command_template = "ipmitool -H <host> -U <username> -P <password> -I lan -L OPERATOR"

  commands {
    powerOff = ${powermanagement.command_template}" chassis power off"
    powerOn = ${powermanagement.command_template}" chassis power on"
    powerSoft = ${powermanagement.command_template}" chassis power soft"
    powerState = ${powermanagement.command_template}" chassis power status"
    rebootHard = ${powermanagement.command_template}" chassis power cycle"
    rebootSoft = ${powermanagement.command_template}" chassis power reset"
    identify = ${powermanagement.command_template}" chassis identify <interval>"
    verify = "ping -c 3 <host>"
  }
}

intake.params = []

# Ip Address Allocation Pools
ipAddresses {
  pools {
    RACK-A1 {
      network="192.168.1.0/24"
      startAddress="192.168.1.100"
      endAddress="192.168.1.177"
      gateway="192.168.1.1"
    }
  }
}

ipmi {
  randomUsername = false
  username = "root"
  passwordLength = 16
  network="192.168.1.0/24"
  startAddress="192.168.1.178"
  endAddress="192.168.1.254"
}

lshw {
  flashProducts = ["fusionio", "tachION", "flashmax"]
  flashSize="1400000000000"

  # For assets whose NIC capacity cannot be determined
  # Omit this default to instead raise an exception when capacity missing
  lshw.defaultNicCapacity=10000000000
}

# Set logging properties in logger.xml or dev_logger.xml

querylog {
  enabled = false
  prefix = "QUERY: "
  includeResults = false
  frontendLogging = true
}

solr {
  enabled = true
  repopulateOnStartup = false
  useEmbeddedServer = true
  externalUrl="http://localhost:8983/solr"
  embeddedSolrHome = "conf/solr/"
}

# Thread pool Configuration
# ~~~~~

# https://www.playframework.com/documentation/2.1.x/ThreadPools
# iteratee thread pool for play framework
iteratee-threadpool-size = 12

# internal thread pool for play framework threads
internal-threadpool-size = 12

# play default thread pool
# Accessible under play-akka.actor.default-dispatcher
play {
  akka {
    actor {
      default-dispatcher = {
        fork-join-executor {
          parallelism-factor = 1.0
          parallelism-max = 24
        }
      }
    }
  }
}

# Akka System Configuration
# ~~~~~

# Akka system used internally by Collins
akka {
  actor {
    default-dispatcher = {
      fork-join-executor {
        parallelism-factor = 1.0
        parallelism-max = 24
      }
    }

    deployment = {
      /background-processor = {
        dispatcher = default-dispatcher
        router = round-robin
        nr-of-instances = 128
      }

      /solr_asset_updater = {
        dispatcher = default-dispatcher
        router = round-robin
        nr-of-instances = 1
      }

      /solr_asset_log_updater = {
        dispatcher = default-dispatcher
        router = round-robin
        nr-of-instances = 1
      }

      /change_queue_processor = {
        dispatcher = default-dispatcher
        router = round-robin
        nr-of-instances = 1
      }
    }
  }
}

include "database.conf"
